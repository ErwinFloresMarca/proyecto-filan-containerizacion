services:
  # Frontend
  frontend:
    # build: ./frontend
    image: dockeramiro/ucb-frontend-pf:v1.0.0
    ports:
      - "${FRONTEND_PORT}:5173"
    environment:
      - VITE_TASK_SERVICE_URL=http://localhost:${TASK_SERVICE_PORT}
      - VITE_USER_SERVICE_URL=http://localhost:${USER_SERVICE_PORT}
    depends_on:
      - task-service
      - user-service
    networks:
      - app-network

  # Task Service
  task-service:
    # build: ./task-service
    image: dockeramiro/ucb-task-service:v1.0.1
    ports:
      - "${TASK_SERVICE_PORT}:3001"
    environment:
      - DATABASE_URL=mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DB}
      - PORT=3001
      - WAIT_HOSTS=mysql:3306
      - WAIT_TIMEOUT=300
      - WAIT_SLEEP_INTERVAL=10
    depends_on:
      - mysql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # User Service
  user-service:
    # build: ./user-service
    image: dockeramiro/ucb-user-service:v1.0.0
    ports:
      - "${USER_SERVICE_PORT}:3002"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/{MONGO_INITDB_DATABASE}
      - PORT=3002
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: ${MYSQL_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d/
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "taskuser", "-ptaskpass"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - task-service
      - user-service
    networks:
      - app-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3005:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - app-network

volumes:
  mysql_data:
    driver: local
  mongo_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app-network:
    driver: bridge
